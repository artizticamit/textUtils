{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","onClick","toggleMode","role","htmlFor","TextForm","useState","text","setText","style","color","heading","value","onChange","event","target","backgroundColor","rows","newText","toUpperCase","showAlert","toLowerCase","split","map","currentValue","slice","join","document","getElementById","select","navigator","clipboard","writeText","length","Alert","alert","class","word","lower","charAt","capitalize","msg","App","setMode","setAlert","message","setTimeout","aboutText","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.13316d26.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import {\r\n//   Link\r\n// } from \"react-router-dom\";\r\n\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n          <div className=\"container-fluid\">\r\n            <a className=\"navbar-brand\"  href=\"/\">{props.title}</a>\r\n            {/* <Link className=\"navbar-brand\"  to=\"/\">{props.title}</Link> */}\r\n            <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n              <span className=\"navbar-toggler-icon\"></span>\r\n            </button>\r\n            <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n              <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                <li className=\"nav-item\">\r\n                  <a className=\"nav-link active\" aria-current=\"page\" href=\"/\">Home</a>\r\n                </li>\r\n                {/* <li className=\"nav-item\">\r\n                  <a className=\"nav-link\" href=\"/about\">{props.aboutText}</a>\r\n                </li> */}\r\n              </ul>\r\n              <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n                <input className=\"form-check-input\" type=\"checkbox\" onClick={props.toggleMode} role=\"switch\" id=\"flexSwitchCheckDefault\" />\r\n                <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\" >Enable Dark Mode</label>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nNavbar.propTypes ={\r\n    title: PropTypes.string.isRequired,\r\n    aboutText: PropTypes.string\r\n}\r\n\r\n// Navbar.defaultProps ={\r\n//     title: 'Hello world',\r\n//     aboutText: 'This is about text'\r\n// }\r\n","import React, {useState} from 'react'\r\n\r\nexport default function TextForm(props) {\r\n\r\n    const handleUpClick = ()=>{\r\n        // console.log(\"The button handleUpclick was pressed!\" + text);\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert('Converted to Upper case', 'success');\r\n    }\r\n    const handleLoClick = ()=>{\r\n        // console.log(\"The button handleUpclick was pressed!\" + text);\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n    }\r\n    const handleOnChange = (event)=>{\r\n        // console.log(\"OnChange text area\");\r\n        setText(event.target.value)\r\n    }\r\n    const handleClearClick = ()=>{\r\n        // console.log(\"OnChange text area\");\r\n        setText('');\r\n    }\r\n\r\n    const handleCopy = ()=>{\r\n        let text = document.getElementById('myBox');\r\n        text.select();\r\n        navigator.clipboard.writeText(text.value);\r\n        props.showAlert('Copied to clipboard', 'success');\r\n\r\n    }\r\n\r\n    const handleExtraSpaces = ()=>{\r\n        let newText = text.split(/[ ]+/);\r\n        setText(newText.join(\" \"));\r\n    }\r\n\r\n    const intoTitleCase = () => {\r\n        let newText = text.split(\" \").map((currentValue) => {\r\n            let newText = currentValue[0].toUpperCase() + currentValue.slice(1);\r\n            return newText;\r\n        });\r\n        setText(newText.join(\" \"));\r\n    }\r\n\r\n    const [text, setText] = useState(\"\");\r\n\r\n    // setText(\"amit kumar\");\r\n\r\n    return (\r\n        <>\r\n            <div className=\"container my-4\" style={{color: props.mode==='dark'?'white':'#042743'}}>\r\n                <h1>{props.heading}</h1>\r\n                    <div className=\"mb-3\">\r\n                        <textarea className=\"form-control\" value={text} onChange={handleOnChange} style={{backgroundColor: props.mode==='dark'?'grey':'white', color: props.mode==='dark'?'white':'#042743'}} id=\"myBox\" rows=\"8\"></textarea>\r\n                    </div>\r\n                <button className=\"btn btn-primary\" onClick={handleUpClick}>Convert to uppercase</button>\r\n                <button className=\"btn btn-primary mx-2\" onClick={handleLoClick}>Convert to lowercase</button>\r\n                <button className=\"btn btn-primary mx-2\" onClick={handleClearClick}>Clear</button>\r\n                <button className=\"btn btn-primary mx-2\" onClick={intoTitleCase}>To title case</button>\r\n                <button className=\"btn btn-primary mx-2\" onClick={handleCopy}>copy text</button>\r\n                <button className=\"btn btn-primary mx-2\" onClick={handleExtraSpaces}>Remove Extra Spaces</button>\r\n                \r\n            </div>\r\n            <div className=\"container my-3\" style={{color: props.mode==='dark'?'white':'#042743'}}>\r\n                <h1>Text Summary</h1>\r\n                <p>{text.split(\" \").length} words and {text.length} characters</p>\r\n                <p>{0.008*text.split(\" \").length} minutes to read</p>\r\n                <h2>Preview</h2>\r\n                <p>{text.length>0?text:'Enter the text in the text area aboce to preview it here'}</p>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n\r\n\r\n    const capitalize = (word)=>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n\r\n\r\n    return (\r\n            props.alert && <div class={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n                <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg}\r\n                <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button>\r\n            </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Alert\r\n","// import logo from './logo.svg';\nimport './App.css';\n// import About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport Alert from './components/Alert';\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route\n// } from \"react-router-dom\";\n\nimport {useState} from 'react';\n\nfunction App() {\n  const [mode, setMode] = useState('light');\n\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type)=>{\n    setAlert({\n      msg: message,\n      type: type\n    })\n    setTimeout(() => {\n        setAlert(null);\n    }, 2000);\n  }\n\n  const toggleMode = ()=>{\n    if(mode === 'light'){\n      setMode('dark');\n      document.body.style.backgroundColor = '#042743'\n      showAlert('Dark Mode has been enabled', 'success')\n    }\n    else{\n      setMode('light')\n      document.body.style.backgroundColor = 'white'\n      showAlert('Light Mode has been enabled', 'success')\n    }\n  }\n\n\n  return (\n    <>\n      {/* <Router> */}\n      <Navbar title=\"TextUtils\" aboutText=\"About Us\" mode={mode} toggleMode={toggleMode}/>\n      <Alert alert={alert} />\n\n        {/* <Switch>\n          <Route path=\"/about\">\n            <About/>\n          </Route> */}\n    \n          {/* <Route path=\"/\"> */}\n            <TextForm showAlert={showAlert} heading=\"Enter the text to analyze below\" mode={mode}/>\n          {/* </Route>\n        </Switch>\n      </Router> */}\n\n      \n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}